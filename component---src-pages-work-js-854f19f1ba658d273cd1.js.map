{"version":3,"sources":["webpack:///./src/components/Project/index.jsx","webpack:///./src/components/AllProjects/AllProjects.jsx","webpack:///./src/pages/work.js"],"names":["Project","project","to","item","slug","className","alt","src","image","height","title","AllProjects","useState","isDesktop","setIsDesktop","isMobile","setIsMobile","sort","setSort","useEffect","window","innerWidth","left","bottom","duration","delay","distance","id","name","tag","map","option","type","onClick","description","report","sourcecode","image2","includes","key","Work","Helmet","charSet","lang","content","TopHeader","isStartPage","ContactSection","Contact","SideBarButton","showBelow"],"mappings":"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","file":"component---src-pages-work-js-854f19f1ba658d273cd1.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Project = (project) => {\n  return (\n    <Link to={project.item.slug}>\n      <div className=\"bigBox\">\n        <div className=\"projectBox\">\n          <img alt=\"project\" src={project.item.image} height=\"330px\" />\n          <div className=\"onHover\" />\n        </div>\n        <div className=\"bottomBox\">{project.item.title}</div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Project;\n","import React, { useState, useEffect } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport Project from '../Project';\n\nconst AllProjects = () => {\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [sort, setSort] = useState('all');\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  const items = [\n    {\n      title: 'Free Your Mind - 2D platformer game with AI',\n      description:\n        'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n      image: 'title2.png',\n      slug: '/freeyourmind',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'ml', 'games'],\n    },\n    {\n      title: 'Summer Internship at Upsales Nordic',\n      description:\n        'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n      image: 'upsales.jpeg',\n      slug: '/upsales',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web', 'intern'],\n    },\n    {\n      title: 'Modelling and Animation',\n      description:\n        'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n      image: 'fluid2a.png',\n      slug: '/modelling-animation',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'cg'],\n    },\n    {\n      title: 'Cleanpipe website - We Know IT',\n      description:\n        \"As a software engineer at the student run IT-consultancy firm I developed Cleanpipe's new website, which will soon be launched.\",\n      image: 'cleanpipe.png',\n      slug: '/cleanpipe',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web'],\n    },\n    {\n      title: 'Domesday - B.Sc. project Linköping University',\n      description:\n        'The project, created spring 2020, resulted in a multiplayer game for 50 to 100 players where each player connects to the game through a mobile phone device. Each character is a diver whos mission is to gather plastics in an ocean where the environment is designed to best grasp the format of the dome screen. The game was developed using C++ and OpenGL, and communication was handled with node.js and websockets. The internal projection in the dome theater was handled by the tool SGCT that was provided by Linköping University. The game was designed as entertainment before the actual dome screen showing at Visualiseringscenter C in Norrköping.',\n      image: 'diver2.png',\n      image2: 'domen.jpg',\n      slug: '/domesday',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'cg', 'web', 'games'],\n    },\n    {\n      title: 'Boids - Simulation of animal flocking behaviour',\n      description:\n        'The project, created spring 2020 in the course TNM085 Modeling Project, is a simulation of animal flocking behaviour, also known as Boids. The simulation was first implemented in MATLAB, and thereafter in JavaScript with three.js.',\n      image: 'boids-simulation2.png',\n      image2: 'boids-sim.png',\n      slug: '/boids',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'cg', 'web', 'vis', 'ml'],\n    },\n    {\n      title: 'Global Illumination and Rendering project',\n      description:\n        'In the course TNCG15 - Advanced Global Illumination and Rendering, fall 2020, we created a renderer in C++. The renderer is a Monte Carlo ray tracer and can handle diffuse and specular objects. Two of the objects have Lambertian reflectors which absorbs the light, and the third object has a perfect reflector that reflects all rays hitting the object. The course also discussed caustics and other rendering methods.',\n      image: 'GI-project.png',\n      slug: '/global-illumination',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'cg'],\n    },\n    {\n      title: 'Game of Kåken - 3D Computer Graphics',\n      description:\n        'Game of Kåken was a group project in the course TNM061 - 3D Computer Graphics, created spring 2019. We made a Game of Thrones inspired intro, depicting the building Kåkenhus at Campus Norrköping emerging from the ground. ground. The blueprints of the building was used to create a scalable model. 3D-modelling was created in 3DsMax.',\n      image: 'kaken1.jpg',\n      image2: 'kaken2.jpg',\n      slug: '/kaken',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'cg', 'vis'],\n    },\n    {\n      title: 'Summer internship at Axis Communications',\n      description:\n        'Summer 2020, I worked as a software engineer intern at Axis Communications and got the opportunity to develop a new software for Axis surveillance cameras. I worked with both back end and front end development, mainly in TypeScript. I got a chance to design a full scale system, write tests for the application as well as design a user interface from scratch. It was an exciting learning experience and made me more eager to pursue my interest for software development. The software was implemented using TypeScript, Next.js, mongoose, Docker, Jest, CircleCI and more.',\n      image: 'axis.jpg',\n      slug: '/axis',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web', 'intern'],\n    },\n    {\n      title: 'Machine Learning for Social Media project',\n      description:\n        'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n      image: 'spotify.png',\n      slug: '/spotify-project',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web', 'ml'],\n    },\n    // {\n    //   title: 'Information Visualization project',\n    //   description:\n    //     'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n    //   image: 'infovis2.png',\n    //   slug: '/infovis',\n    //   report: '',\n    //   sourcecode: '',\n    //   type: ['all', 'web', 'vis'],\n    // },\n    {\n      title: 'Advanced Web Programming',\n      description:\n        'A project made in the course TDDD27 Advanced Web Programming. My partner and I created a CrossFit booking system. The frontend was developed with Vue and SCSS, and the backend in TypeScript with Node.js.',\n      image: 'crossfit2.png',\n      slug: '/crossfit-booking',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web'],\n    },\n    {\n      title: 'Structural Methods for User Experience (UX)',\n      description:\n        'Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.',\n      image: 'bla_prick2.png',\n      slug: '/ux-project',\n      report: '',\n      sourcecode: '',\n      type: ['all', 'web'],\n    },\n    // {\n    //   title: 'Interaction Programming',\n    //   image: 'creditcard.png',\n    //   slug: '/interaction-programming',\n    //   report: '',\n    //   sourcecode: '',\n    //   type: ['all', 'web'],\n    // },\n    // {\n    //   title: 'Diatot - Communication and User Interfaces',\n    //   description:\n    //     'Group project in the course TNM040 - Communication and User Interfaces created fall 2018. A mobile phone adapted website for diabetics to record the blood sugar and carbohydrate intake to calculate a bolus dose of insulin. Implemented in JavaScript and React.',\n    //   image: 'diatotfull.png',\n    //   slug: '/diatot',\n    //   report: '',\n    //   sourcecode: '',\n    //   type: ['all', 'web'],\n    // },\n  ];\n\n  const options = [\n    {\n      name: 'All',\n      tag: 'all',\n    },\n    {\n      name: 'Computer Graphics',\n      tag: 'cg',\n    },\n    {\n      name: 'Web',\n      tag: 'web',\n    },\n    {\n      name: 'Games',\n      tag: 'games',\n    },\n    {\n      name: 'Machine Learning / AI',\n      tag: 'ml',\n    },\n  ];\n\n  return (\n    <section>\n      <Fade left={isDesktop} bottom={isMobile} duration={500} delay={250} distance=\"30px\">\n        <h2 className=\"section-title\" id=\"portfolio\">\n          My work\n        </h2>\n        <p id=\"sub\">\n          A selection of my work can be found below. Press the items to find out more about each\n          project.\n        </p>\n        <div className=\"options\">\n          {options.map((option) => (\n            <>\n              {option.tag === sort ? (\n                <button\n                  type=\"button\"\n                  className=\"sort\"\n                  id=\"selected\"\n                  onClick={() => setSort(option.tag)}\n                >\n                  {option.name}\n                </button>\n              ) : (\n                <button type=\"button\" className=\"sort\" onClick={() => setSort(option.tag)}>\n                  {option.name}\n                </button>\n              )}\n            </>\n          ))}\n        </div>\n      </Fade>\n      <div className=\"projectItems\">\n        {items.map((item) => (\n          <>{item.type.includes(sort) ? <Project key={item.title} item={item} /> : null}</>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default AllProjects;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../style/main.scss';\nimport SideBarButton from '../components/SideBarButton/SideBarButton';\nimport TopHeader from '../components/TopHeader/TopHeader';\nimport AllProjects from '../components/AllProjects/AllProjects';\nimport ContactSection from '../components/ContactSection/ContactSection';\nimport Contact from '../components/Contact/Contact';\n\nexport default function Work() {\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Iris Kotsinas</title>\n        <html lang=\"en\" />\n        <meta name=\"description\" content=\"Iris Portfolio\" />\n      </Helmet>\n      <TopHeader isStartPage={false} />\n      <AllProjects />\n      <ContactSection />\n      <Contact />\n      <SideBarButton showBelow={70} />\n    </>\n  );\n}\n"],"sourceRoot":""}