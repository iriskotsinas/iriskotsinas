(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{Ofmp:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return h}));var i=a("q1tI"),n=a.n(i),s=a("qhky"),r=(a("q4sD"),a("J9yo"),a("Qngu")),o=a("lYm0"),l=a("/eHF"),c=a.n(l),d=a("Wbzz"),m=function(e){return n.a.createElement(d.Link,{to:e.item.slug},n.a.createElement("div",{className:"bigBox"},n.a.createElement("div",{className:"projectBox"},n.a.createElement("img",{alt:"project",src:e.item.image,height:"330px"}),n.a.createElement("div",{className:"onHover"})),n.a.createElement("div",{className:"bottomBox"},e.item.title)))},p=function(){var e=Object(i.useState)(!1),t=e[0],a=e[1],s=Object(i.useState)(!1),r=s[0],o=s[1],l=Object(i.useState)("all"),d=l[0],p=l[1];Object(i.useEffect)((function(){window.innerWidth>769?(a(!0),o(!1)):(o(!0),a(!1))}),[]);return n.a.createElement("section",null,n.a.createElement(c.a,{left:t,bottom:r,duration:500,delay:250,distance:"30px"},n.a.createElement("h2",{className:"section-title",id:"portfolio"},"My work"),n.a.createElement("p",{id:"sub"},"A selection of my work can be found below. Press the items to find out more about each project."),n.a.createElement("div",{className:"options"},[{name:"All",tag:"all"},{name:"Computer Graphics",tag:"cg"},{name:"Web",tag:"web"},{name:"Games",tag:"games"},{name:"Machine Learning / AI",tag:"ml"}].map((function(e){return n.a.createElement(n.a.Fragment,{key:e.tag},e.tag===d?n.a.createElement("button",{type:"button",className:"sort",id:"selected",onClick:function(){return p(e.tag)}},e.name):n.a.createElement("button",{key:e.name,type:"button",className:"sort",onClick:function(){return p(e.tag)}},e.name))})))),n.a.createElement("div",{className:"projectItems"},[{title:"Voronoi Fracturing",description:"The course TSBK03 Advanced Game Programming at Linköping University in fall 2021 consisted of a series of four labs as well as a project. The course covered topics within computer graphics implemented in C++ and OpenGL.",description2:"This project explores how the destruction of 2D objects, such as walls and glass planes, can be simulated realistically. This is done with 2D Voronoi diagrams using Fortune's algorithm in C++ and OpenGL. The generated fragments are extruded into 3D and simulated with Bullet Physics as rigid bodies. Different patterns are implemented for the distribution of points. The resulting simulation provides a semi-realistic destruction of objects in real-time.",image:"0.png",image2:"1.png",slug:"/voronoi-fracturing",report:"",simulation:"",sourcecode:"",type:["all","cg"]},{title:"Procedural Generation with Lindenmayer Systems",description:"The course TNM084 Procedural Images, taken in fall 2021, consisted of four labs and an individual project. The course covered topics within computer graphics such as procedural generation.",description2:"This project explores how a tree can be created with the use of a Lindenmayer system (L-system) and instancing. It also investigates how noise can be applied to a plane to simulate snow as well as the simulation of falling snowflakes. For the terrain, Fractal Brownian Noise has been used. Instancing and billboards were used to simulate the snowflakes. For the tree, an L-system was created and used, as well as instancing for the branches and leaves to increase the performance. The result of this project is a web application built with TypeScript and WebGL that runs in real-time. The project resulted in a semi-realistic simulation of a tree in a snowy environment.",image:"tree3.png",image2:"tree2.png",slug:"/l-system",report:"",sourcecode:"",type:["all","cg"]},{title:"Free Your Mind - 2D platformer game with AI",description:"Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.",image:"title2.png",slug:"/freeyourmind",report:"",sourcecode:"",type:["all","ml","games"]},{title:"Modelling and Animation",description:"Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.",image:"fluid2a.png",slug:"/modelling-animation",report:"",sourcecode:"",type:["all","cg"]},{title:"Summer Internship at Upsales Nordic",description:"Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.",image:"upsales.jpeg",slug:"/upsales",report:"",sourcecode:"",type:["all","web","intern"]},{title:"Cleanpipe website - We Know IT",description:"As a software engineer at the student run IT-consultancy firm I developed Cleanpipe's new website, which is available on www.cleanpipe.se.",image:"wkit.png",slug:"/cleanpipe",report:"",sourcecode:"",type:["all","web"]},{title:"Domesday - B.Sc. project Linköping University",description:"The project, created spring 2020, resulted in a multiplayer game for 50 to 100 players where each player connects to the game through a mobile phone device. Each character is a diver whos mission is to gather plastics in an ocean where the environment is designed to best grasp the format of the dome screen. The game was developed using C++ and OpenGL, and communication was handled with node.js and websockets. The internal projection in the dome theater was handled by the tool SGCT that was provided by Linköping University. The game was designed as entertainment before the actual dome screen showing at Visualiseringscenter C in Norrköping.",image:"diver2.png",image2:"domen.jpg",slug:"/domesday",report:"",sourcecode:"",type:["all","cg","web","games"]},{title:"Boids - Simulation of animal flocking behaviour",description:"The project, created spring 2020 in the course TNM085 Modeling Project, is a simulation of animal flocking behaviour, also known as Boids. The simulation was first implemented in MATLAB, and thereafter in JavaScript with three.js.",image:"boids-simulation2.png",image2:"boids-sim.png",slug:"/boids",report:"",sourcecode:"",type:["all","cg","web","vis","ml"]},{title:"Global Illumination and Rendering project",description:"In the course TNCG15 - Advanced Global Illumination and Rendering, fall 2020, we created a renderer in C++. The renderer is a Monte Carlo ray tracer and can handle diffuse and specular objects. Two of the objects have Lambertian reflectors which absorbs the light, and the third object has a perfect reflector that reflects all rays hitting the object. The course also discussed caustics and other rendering methods.",image:"GI-project.png",slug:"/global-illumination",report:"",sourcecode:"",type:["all","cg"]},{title:"Game of Kåken - 3D Computer Graphics",description:"Game of Kåken was a group project in the course TNM061 - 3D Computer Graphics, created spring 2019. We made a Game of Thrones inspired intro, depicting the building Kåkenhus at Campus Norrköping emerging from the ground. ground. The blueprints of the building was used to create a scalable model. 3D-modelling was created in 3DsMax.",image:"kaken1.jpg",image2:"kaken2.jpg",slug:"/kaken",report:"",sourcecode:"",type:["all","cg","vis"]},{title:"Summer internship at Axis Communications",description:"Summer 2020, I worked as a software engineer intern at Axis Communications and got the opportunity to develop a new software for Axis surveillance cameras. I worked with both back end and front end development, mainly in TypeScript. I got a chance to design a full scale system, write tests for the application as well as design a user interface from scratch. It was an exciting learning experience and made me more eager to pursue my interest for software development. The software was implemented using TypeScript, Next.js, mongoose, Docker, Jest, CircleCI and more.",image:"axis.jpg",slug:"/axis",report:"",sourcecode:"",type:["all","web","intern"]},{title:"Machine Learning for Social Media project",description:"Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.",image:"spotify.png",slug:"/spotify-project",report:"",sourcecode:"",type:["all","web","ml"]},{title:"Advanced Web Programming",description:"A project made in the course TDDD27 Advanced Web Programming. My partner and I created a CrossFit booking system. The frontend was developed with Vue and SCSS, and the backend in TypeScript with Node.js.",image:"crossfit2.png",slug:"/crossfit-booking",report:"",sourcecode:"",type:["all","web"]},{title:"Structural Methods for User Experience (UX)",description:"Project in the course TNM108 Machine Learning for Social Media. We created a program to classify christmas songs. We used the Spotify Web API and Spotipy to collect playlist data. The test and training data consisted of christmas songs and songs of different genres. Three different machine learning models were used and compared, Decision Tree Classifier, K-Nearest Neighbor Classifier and Random Forest Classifier. We used the Spotify Web API and Spotipy. The project was implemented in Python.",image:"bla_prick2.png",slug:"/ux-project",report:"",sourcecode:"",type:["all","web"]}].map((function(e){return n.a.createElement(n.a.Fragment,null,e.type.includes(d)?n.a.createElement(m,{key:e.title,item:e}):null)}))))},g=a("D1C/"),u=a("nKWw");function h(){return n.a.createElement(n.a.Fragment,null,n.a.createElement(s.a,null,n.a.createElement("meta",{charSet:"utf-8"}),n.a.createElement("title",null,"Iris Kotsinas"),n.a.createElement("html",{lang:"en"}),n.a.createElement("meta",{name:"description",content:"Iris Portfolio"})),n.a.createElement(o.a,{isStartPage:!1}),n.a.createElement(p,null),n.a.createElement(g.a,null),n.a.createElement(u.a,null),n.a.createElement(r.a,{showBelow:70}))}}}]);
//# sourceMappingURL=component---src-pages-work-js-2035997d619134a8bb88.js.map